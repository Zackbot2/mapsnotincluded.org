name: Build Mod

on:
  push:
    branches: [ "main" ]
    paths:
      - 'mod/**'
  workflow_dispatch:

permissions:
  contents: write # Grant write permission for creating releases
  actions: write # Grant write permission to delete old workflow runs

defaults:
  run:
    working-directory: ./mod

jobs:
  build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
  
      - name: Set SHORT_COMMIT environment variable
        shell: pwsh
        run: |
          $SHORT_COMMIT = git rev-parse --short HEAD
          echo "SHORT_COMMIT=$SHORT_COMMIT" >> $env:GITHUB_ENV

      - name: Replace credentials
        run: sed -i 's\7FE9SFM9jdv7CcL\${{ secrets.MNI_API_KEY }}\g' _WorldGenStateCapture\Credentials.cs    
        
      - name: Insert commit version ID
        run: sed -i 's\REPLACE_SHORT_COMMIT\${{ env.SHORT_COMMIT }}\g' _WorldGenStateCapture\Credentials.cs

      - name: Add MSBuild to PATH
        uses: microsoft/setup-msbuild@v2

      - name: NuGet Restore
        run: msbuild -t:restore -property:Configuration=Release

      - name: Build project
        run: msbuild -t:rebuild -property:Configuration=Release -property:GameLibsFolder="../Lib"

      - name: Create Zip target directory
        run: mkdir BuildsZipped


      - name: Create individual mod zips and description
        id: buildtext
        run: |    
            # install yaml parser for mod info files
            Install-Module powershell-yaml -Force
            # start creation of release desc. file
            echo "The latest version of the seed collector mod." >> ./Desc.md
            echo "latest change -> ${{env.SHORT_COMMIT}}" >> ./Desc.md
            
            #create version info json file
            echo "{`"mods`":[" >> ./BuildsZipped/_ReleaseVersionInfoData.json

            #iterate through the built mod folders to individually zip them and grep their info
            $source = './Builds'
            $destination = './BuildsZipped'
            $subfolders = Get-ChildItem $source -Directory
            foreach ($s in $subfolders) { 
            $folderpath = $s.FullName
            
            #parse the mod info files
            $modInfoData = ConvertFrom-Yaml -Yaml $(Get-Content -Raw "$folderpath/mod_info.yaml") -AllDocuments
            $modData = ConvertFrom-Yaml -Yaml $(Get-Content -Raw "$folderpath/mod.yaml") -AllDocuments
            
            #grep data from mod.yaml file
            $modId= $modData."staticID"
            $ModName = $modData."title"
            $ModDesc = $modData."description"       

            #write version data to version json file
            $minGameVersion= $modInfoData."minimumSupportedBuild"
            $modVersion= $modInfoData."version"
            
            echo "Latest Version: $modVersion" >> ./Desc.md     

            $ModNameCleaned = $ModName.Replace('''','').Replace('"','')
            $ModDescCleaned = $ModDesc.Replace('''','').Replace('"','')
            
            echo "{`"staticID`":`"$modId`",`"version`":`"$modVersion`",`"minimumSupportedBuild`":`"$minGameVersion`",`"modName`":`"$ModNameCleaned`",`"modDesc`":`"$ModDescCleaned`"},">> ./BuildsZipped/_ReleaseVersionInfoData.json
            
            #create zip file
            Compress-Archive -Path $folderpath/* -DestinationPath ./BuildsZipped/$modId 
            }
                        
            #finalize version info json file
            echo "]}" >> ./BuildsZipped/_ReleaseVersionInfoData.json
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: List all files
        shell: cmd
        run: |
          dir /s /b

      - name: Delete old releases
        uses: dev-drprasad/delete-older-releases@v0.3.4
        with:
          keep_latest: 0
          delete_tag_pattern: MNI_Mod_Automatic_Release
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Create GitHub release
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "MNI_Mod_Automatic_Release"
          release_name: "Mod Binary"
          body_path: "./mod/Desc.md"
          draft: false
          prerelease: false

      - name: Upload files to github release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./mod/BuildsZipped/*.*
          file_glob: true
          tag: MNI_Mod_Automatic_Release
          prerelease: false
          overwrite: true
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                      
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 1
          keep_minimum_runs: 3

      - name: Compute SHA-256 checksum and send to server
        shell: powershell
        continue-on-error: true # may be turned off later
        env:
          API_KEY: ${{ secrets.DATABASE_EXPORT_API_KEY }}
        run: |
          
          $filePath = "Builds/MapsNotIncluded_WorldParser/MapsNotIncluded_WorldParser.dll"
          
          if (Test-Path -Path $filePath) {
          
            $checksum = (Get-FileHash -Path $filePath -Algorithm SHA256 | Select-Object -ExpandProperty Hash).ToLower()
          
            $headers = @{
              "API_KEY" = "$env:API_KEY"
              "GIT_TAG" = "$env:SHORT_COMMIT"
            }

            $response = Invoke-RestMethod -Uri "https://ingest.mapsnotincluded.org/add-mod-binary-checksum" -Method Post -Headers $headers -Body $checksum -ContentType "text/plain"

            Write-Output "Server response: $response"
          
          } else {
          
            Write-Error "File not found: $filePath"
          }

      - name: Create version info files
        shell: pwsh
        run: |
          
          $filePath = "Builds/MapsNotIncluded_WorldParser/MapsNotIncluded_WorldParser.dll"
          
          if (Test-Path -Path $filePath) {

            # Calculate checksum from DLL
            $checksum = (Get-FileHash -Path $filePath -Algorithm SHA256 | Select-Object -ExpandProperty Hash).ToLower()
          
            # Get version from the previously generated JSON info file
            $modVersion = (Get-Content "./BuildsZipped/_ReleaseVersionInfoData.json" | ConvertFrom-Json).mods[0].version
          
            # Get commit hash from environment variable
            $commitHash = "${{ env.SHORT_COMMIT }}"

            # --- Create individual text files ---
            Write-Output "Creating version.txt, checksum.txt, and commit.txt"
            Set-Content -Path version.txt -Value $modVersion -Encoding UTF8 -NoNewline
            Set-Content -Path checksum.txt -Value $checksum -Encoding UTF8 -NoNewline
            Set-Content -Path commit.txt -Value $commitHash -Encoding UTF8 -NoNewline

            # --- Create an JSON file ---
            Write-Output "Creating version.json"
            $json = @{
              version = $modVersion
              checksum = $checksum
              commit = $commitHash
            } | ConvertTo-Json -Compress
            Set-Content -Path version.json -Value $json -Encoding UTF8 -NoNewline
          
          } else {
            Write-Error "File not found: $filePath"
          }

      - name: Prepare GitHub pages deployment artifacts
        run: |
          mkdir -p ../deploy_temp
          mv version.json version.txt checksum.txt commit.txt ../deploy_temp/
        shell: bash

      - name: Deploy version info files to GitHub pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: ./deploy_temp
          commit_message: "Update mod version info"
